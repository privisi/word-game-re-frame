{"version":3,"sources":["word_game/views.cljs"],"mappings":"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","names":["word-game.views/word-list","G__42501","re-frame.core/subscribe","cljs.core/deref","clojure.string.join","word-game.views/span-color","text","color","cljs.core.rand","word-game.views/word-input","current-input","iter__4529__auto__","s__42503","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__42505","cljs.core/chunk-buffer","i__42504","vec__42506","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42502","cljs.core/chunk-rest","vec__42509","cljs.core/first","cljs.core/cons","cljs.core/rest","letter","word-game.views/alert-toast","G__42512","G__42513","word-game.views/enter-button","G__42514","re-frame.core/dispatch","G__42515","G__42516","word-game.views/delete-button","G__42517","word-game.views/shuffle-button","G__42518","word-game.views/create-letter-buttons","letters","s__42521","b__42523","i__42522","p1__42519#","iter__42520","G__42524","G__42525","word-game.views/available-letters","letter-others","letter-core","cljs.core.take","cljs.core.drop","word-game.views/points","G__42527","word-game.events/calculate-ranking-text","G__42529","G__42530","G__42531","word-game.views/modal","G__42532","G__42533","word-game.views/words-found","words","word-game.views/ui","G__42534","G__42535","G__42536","G__42537","cljs.core/chunk-first"],"sourcesContent":["(ns word-game.views\r\n  (:require [reagent.dom]\r\n            [re-frame.core :as rf]\r\n            [clojure.string :as str]))\r\n\r\n\r\n;; -- Domino 5 - View Functions ----------------------------------------------\r\n\r\n(defn word-list\r\n  []\r\n  [:div#word-list\r\n   {:style {:color \"#f88\"}}\r\n   (->>\r\n    @(rf/subscribe [:words-found])\r\n    (clojure.string/join \" \"))])\r\n\r\n(defn span-color\r\n  [text color]\r\n  ^{:key (str text color (rand))} [:span {:style {:color color}} text])\r\n\r\n(defn word-input\r\n  [current-input]\r\n  [:div#word-input\r\n   \"Word: \"\r\n   (for [[letter color] current-input]\r\n     (span-color letter color))\r\n   [:span {:style {:color \"gold\"}\r\n           :class \"blinker\"} \"|\"]])\r\n\r\n(defn alert-toast\r\n  []\r\n  [:div#toast {:class @(rf/subscribe [:toast-visibility])} @(rf/subscribe [:toast-message])])\r\n\r\n(defn enter-button\r\n  []\r\n  [:button\r\n   {:on-click #(do (rf/dispatch [:insert-word @(rf/subscribe [:word-input])])\r\n                   (rf/dispatch [:clear-word-input \"\"]))}\r\n   \"Enter\"])\r\n\r\n(defn delete-button\r\n  []\r\n  [:button\r\n   {:on-click #(rf/dispatch [:word-input-delete-letter])}\r\n   \"Delete\"])\r\n\r\n(defn shuffle-button\r\n  []\r\n  [:button\r\n   {:on-click #(rf/dispatch [:shuffle-letters])}\r\n   \"\ud83d\udd00\"])\r\n\r\n(defn create-letter-buttons\r\n  \"Returns a row of buttons with each corresponding letter from LETTERS\"\r\n  [letters]\r\n  (for [letter letters]\r\n    ^{:key letter} [:button\r\n                    {:on-click #(do (rf/dispatch [:word-input-add-letter letter])\r\n                                    (.blur (-> % .-target)))\r\n                     :tab-index -1}\r\n                    letter]))\r\n\r\n(defn available-letters\r\n  [letter-others letter-core]\r\n  [:div#letters\r\n   (create-letter-buttons (take 3 letter-others))\r\n   [:div#letters-core (create-letter-buttons letter-core)]\r\n   (create-letter-buttons (drop 3 letter-others))])\r\n\r\n(defn points\r\n  []\r\n  [:div#points\r\n   [:p (str \"Points: \" @(rf/subscribe [:points]))]\r\n   [:p (str \"Current Ranking: \" (word-game.events/calculate-ranking-text @(rf/subscribe [:points-ranking])))]\r\n   [:input {:type \"range\" :min 0 :max 8 :steps 1\r\n            :value @(rf/subscribe [:points-ranking])\r\n            :class \"slider\"\r\n            :on-click #(rf/dispatch [:show-modal])\r\n            :read-only true}]\r\n   [:div#sliderticks\r\n    [:p 0]\r\n    [:p 2]\r\n    [:p 5]\r\n    [:p 7]\r\n    [:p 14]\r\n    [:p 23]\r\n    [:p 37]\r\n    [:p 47]\r\n    [:p 65]]])\r\n\r\n(defn modal\r\n  []\r\n  [:div {:class \"modal\"\r\n         :style {:display @(rf/subscribe [:modal-visibility])}}\r\n   [:div {:class \"modal-content\"}\r\n    [:span {:class \"close\"\r\n            :on-click #(rf/dispatch [:hide-modal])}\r\n     \"X\"]\r\n    [:p \"Ranks are based on a percentage of possible points\r\n         in a puzzle.\" [:br] \"The minimum scores to reach \r\n         each rank for today\u2019s are:\" [:br]]\r\n    [:p \"Beginner (0)\"]\r\n    [:p \"Good Start (2)\"]\r\n    [:p \"Moving Up (5)\"]\r\n    [:p \"Good (7)\"]\r\n    [:p \"Solid (14)\"]\r\n    [:p \"Nice (23)\"]\r\n    [:p \"Great (37)\"]\r\n    [:p \"Amazing (47)\"]\r\n    [:p \"Genius (65)\"]]])\r\n\r\n(defn words-found [words]\r\n  [:p (str \"Words Found: \" (count words))])\r\n\r\n(defn ui\r\n  []\r\n  [:div\r\n   [:h1 \"Word Game\"]\r\n   [alert-toast]\r\n   [word-input @(rf/subscribe [:word-input])]\r\n   [available-letters @(rf/subscribe [:letter-others])\r\n                      @(rf/subscribe [:letter-core])]\r\n   [enter-button]\r\n   [shuffle-button]\r\n   [delete-button]\r\n   [points]\r\n   [words-found @(rf/subscribe [:words-found])]\r\n   [word-list]\r\n   [modal]])"]}