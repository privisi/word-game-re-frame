{"version":3,"sources":["word_game/views.cljs"],"mappings":"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","names":["word-game.views/word-list","G__66636","re-frame.core/subscribe","cljs.core/deref","clojure.string.join","word-game.views/span-color","text","color","cljs.core.rand","word-game.views/word-input","current-input","iter__4529__auto__","s__66638","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__66640","cljs.core/chunk-buffer","i__66639","vec__66641","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66637","cljs.core/chunk-rest","vec__66644","cljs.core/first","cljs.core/cons","cljs.core/rest","letter","word-game.views/alert-toast","G__66647","G__66648","word-game.views/enter-button","G__66649","re-frame.core/dispatch","G__66650","G__66651","word-game.views/delete-button","G__66652","word-game.views/shuffle-button","G__66653","p1__66655#","word-game.views/available-letters","letter-others","letter-core","s__66658","b__66660","i__66659","p1__66654#","iter__66657","cljs.core.take","G__66661","G__66662","G__66663","s__66665","b__66667","i__66666","p1__66656#","iter__66664","cljs.core.drop","G__66668","G__66669","word-game.views/points","G__66671","word-game.events/calculate-ranking-text","G__66673","G__66674","G__66675","word-game.views/modal","G__66676","G__66677","word-game.views/ui","G__66678","G__66679","G__66680","G__66682","cljs.core/chunk-first"],"sourcesContent":["(ns word-game.views\r\n  (:require [reagent.dom]\r\n            [re-frame.core :as rf]\r\n            [clojure.string :as str]))\r\n\r\n\r\n;; -- Domino 5 - View Functions ----------------------------------------------\r\n\r\n(defn word-list\r\n  []\r\n  [:div#word-list\r\n   {:style {:color \"#f88\"}}\r\n   (->>\r\n    @(rf/subscribe [:words-found])\r\n    (clojure.string/join \" \"))])\r\n\r\n(defn span-color\r\n  [text color]\r\n  ^{:key (str text color (rand))} [:span {:style {:color color}} text])\r\n\r\n(defn word-input\r\n  [current-input]\r\n  (for [[letter color] current-input]\r\n    (span-color letter color)))\r\n\r\n(defn alert-toast\r\n  []\r\n  [:div#toast {:class @(rf/subscribe [:toast-visibility])} @(rf/subscribe [:toast-message])])\r\n\r\n(defn enter-button\r\n  []\r\n  [:button\r\n   {:on-click #(do (rf/dispatch [:insert-word @(rf/subscribe [:word-input])])\r\n                   (rf/dispatch [:clear-word-input \"\"]))}\r\n   \"Enter\"])\r\n\r\n(defn delete-button\r\n  []\r\n  [:button\r\n   {:on-click #(rf/dispatch [:word-input-delete-letter])}\r\n   \"Delete\"])\r\n\r\n(defn shuffle-button\r\n  []\r\n  [:button\r\n   {:on-click #(rf/dispatch [:shuffle-letters])}\r\n   \"\ud83d\udd00\"])\r\n\r\n(defn available-letters\r\n  [letter-others letter-core]\r\n  [:div#letters\r\n   (for [letter (take 3 letter-others)]\r\n     ^{:key letter} [:button\r\n                     {:on-click #(do (rf/dispatch [:word-input-add-letter letter])\r\n                                     (.blur (-> % .-target)))\r\n                      :tab-index -1}\r\n                     letter])\r\n   [:div#letters-core\r\n    [:button\r\n     {:on-click #(do (rf/dispatch [:word-input-add-letter letter-core])\r\n                     (.blur (-> % .-target)))}\r\n     letter-core]]\r\n   (for [letter (drop 3 letter-others)]\r\n     ^{:key letter} [:button\r\n                     {:on-click #(do (rf/dispatch [:word-input-add-letter letter])\r\n                                     (.blur (-> % .-target)))}\r\n                     letter])])\r\n\r\n(defn points\r\n  []\r\n  [:div#points\r\n   [:p (str \"Points: \" @(rf/subscribe [:points]))]\r\n   [:p (str \"Current Ranking: \" (word-game.events/calculate-ranking-text @(rf/subscribe [:points-ranking])))]\r\n   [:input {:type \"range\" :min 0 :max 8 :steps 1\r\n            :value @(rf/subscribe [:points-ranking])\r\n            :class \"slider\"\r\n            :on-click #(rf/dispatch [:show-modal])\r\n            :read-only true}]\r\n   [:div#sliderticks\r\n    [:p 0]\r\n    [:p 2]\r\n    [:p 5]\r\n    [:p 7]\r\n    [:p 14]\r\n    [:p 23]\r\n    [:p 37]\r\n    [:p 47]\r\n    [:p 65]]])\r\n\r\n(defn modal\r\n  []\r\n  [:div {:class \"modal\"\r\n         :style {:display @(rf/subscribe [:modal-visibility])}}\r\n   [:div {:class \"modal-content\"}\r\n    [:span {:class \"close\"\r\n            :on-click #(rf/dispatch [:hide-modal])}\r\n     \"X\"]\r\n    [:p \"Ranks are based on a percentage of possible points\r\n         in a puzzle.\" [:br] \"The minimum scores to reach \r\n         each rank for today\u2019s are:\" [:br]]\r\n    [:p \"Beginner (0)\"]\r\n    [:p \"Good Start (2)\"]\r\n    [:p \"Moving Up (5)\"]\r\n    [:p \"Good (7)\"]\r\n    [:p \"Solid (14)\"]\r\n    [:p \"Nice (23)\"]\r\n    [:p \"Great (37)\"]\r\n    [:p \"Amazing (47)\"]\r\n    [:p \"Genius (65)\"]]])\r\n\r\n(defn ui\r\n  []\r\n  [:div\r\n   [:h1 \"Word Game\"]\r\n   [alert-toast]\r\n   [:div#word-input\r\n    \"Word: \"\r\n    (word-input @(rf/subscribe [:word-input]))\r\n    [:span {:style {:color \"gold\"}\r\n            :class \"blinker\"} \"|\"]]\r\n   [available-letters @(rf/subscribe [:letter-others])\r\n    @(rf/subscribe [:letter-core])]\r\n   [enter-button]\r\n   [shuffle-button]\r\n   [delete-button]\r\n   [points]\r\n   [:p (str \"Words Found: \" (count @(rf/subscribe [:words-found])))]\r\n   [word-list]\r\n   [modal]])"]}