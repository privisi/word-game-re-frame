{"version":3,"sources":["word_game/events.cljs"],"mappings":"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","names":["js/word-game","js/word-game.events","js/word-game.events.timeouts","word-game.events/timeouts","reagent.core.atom","p1__42398#","js/document","input","cljs.core._EQ_","G__42399","re-frame.core/dispatch","G__42400","cljs.core/deref","G__42401","re-frame.core/subscribe","G__42402","cljs.core/re-seq","cljs.core/char","G__42403","clojure.string/capitalize","re_frame.core.reg_event_db","_","p__42404","vec__42405","cljs.core.nth","db","changed-input-value","cljs.core.assoc","clojure.string/upper-case","cljs.core/vec","cljs.core.drop_last","word-game.events/calculate-points","word","letter-count","cljs.core/count","points","cljs.core/set","re_frame.core.reg_event_fx","p__42408","p__42409","map__42410","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__42411","curr-points","new-points","word-game.events/calculate-ranking-text","points-ranking","pred__42415","expr__42416","js/Error","cljs.core/=","p__42418","vec__42419","ranking","pred__42422","expr__42423","cljs.core/<=","p__42425","p__42426","map__42427","vec__42428","message","p__42432","vec__42433","letter","letter-others","letter-core","color","cljs.core/some","cljs.core.conj","cljs.core/shuffle","word-game.events/format-word","p1__42436#","p2__42437#","cljs.core.reduce","cljs.core/first","clojure.string/trim","p__42438","p__42439","map__42440","vec__42441","new-word","clojure.string.split","cljs.core/empty?","clojure.string/lower-case","G__42445","G__42446","re-frame.core/reg-fx","p__42447","map__42448","id","event","time","temp__5739__auto__","existing","js/clearTimeout","cljs.core.swap_BANG_","cljs.core/dissoc","cljs.core/assoc","js/setTimeout"],"sourcesContent":["(ns word-game.events\r\n  (:require [reagent.dom]\r\n            [re-frame.core :as rf]\r\n            [clojure.string :as str]\r\n            [reagent.core :as r]))\r\n\r\n\r\n;; -- Domino 1 - Event Dispatch -----------------------------------------------\r\n\r\n(defonce timeouts (r/atom {}))\r\n\r\n(.addEventListener js/document \"keydown\" #(let [input (.-which %)]\r\n                                            (cond\r\n                                              (= 8 input)\r\n                                              (rf/dispatch [:word-input-delete-letter])\r\n\r\n                                              (= 13 input)\r\n                                              (do (rf/dispatch [:insert-word @(rf/subscribe [:word-input])])\r\n                                                  (rf/dispatch [:clear-word-input]))\r\n\r\n                                              (re-seq #\"[a-zA-Z]\" (char input))\r\n                                              (rf/dispatch [:word-input-add-letter (clojure.string/capitalize (char input))]))))\r\n\r\n;; -- Domino 2 - Event Handlers -----------------------------------------------\r\n\r\n(rf/reg-event-db              ;; sets up initial application state\r\n :initialize                 ;; usage:  (dispatch [:initialize])\r\n (fn [_ _]                   ;; the two parameters are not important here, so use _\r\n   {:words-found #{}\r\n    :word-input []\r\n    :toast-visibility \"\"\r\n    :modal-visibility \"\"\r\n    :toast-message \"Howdy!!!\"\r\n    :letter-core \"R\"\r\n    :letter-others [\"A\" \"B\" \"F\" \"O\" \"P\" \"Y\"]\r\n    :points 0\r\n    :points-ranking 0\r\n    :allowed-words #{\"babyproof\" \"afar\" \"affray\" \"afro\" \"arbor\" \"array\"\r\n                     \"arroyo\" \"barb\" \"barf\" \"boar\" \"boor\" \"bray\" \"farro\"\r\n                     \"fora\" \"foray\" \"fray\" \"parry\" \"poor\" \"pray\" \"proof\"\r\n                     \"prop\" \"pyro\" \"roar\" \"roof\" \"ropy\"}}))\r\n\r\n(rf/reg-event-db\r\n :word-input-change\r\n (fn [db [_ changed-input-value]]\r\n   (assoc db :word-input (clojure.string/upper-case changed-input-value))))\r\n\r\n(rf/reg-event-db\r\n :clear-word-input\r\n (fn [db _]\r\n   (assoc db :word-input [])))\r\n\r\n(rf/reg-event-db\r\n :word-input-delete-letter\r\n (fn [db _]\r\n   (assoc db :word-input (vec (drop-last (:word-input db))))))\r\n\r\n(rf/reg-event-db\r\n :show-toast\r\n (fn [db _]\r\n   (assoc db :toast-visibility \"show\")))\r\n\r\n(rf/reg-event-db\r\n :hide-toast\r\n (fn [db _]\r\n   (assoc db :toast-visibility \"\")))\r\n\r\n(rf/reg-event-db\r\n :show-modal\r\n (fn [db _]\r\n   (assoc db :modal-visibility \"block\")))\r\n\r\n(rf/reg-event-db\r\n :hide-modal\r\n (fn [db _]\r\n   (assoc db :modal-visibility \"\")))\r\n\r\n(defn calculate-points\r\n  \"Returns how many points a word is worth\"\r\n  [word]\r\n  (let [letter-count (count word)\r\n        points (if (= 4 letter-count)\r\n                 1\r\n                 letter-count)]\r\n    (if (= 7 (count (set (clojure.string/upper-case word))))\r\n      (+ points 7)\r\n      points)))\r\n\r\n(rf/reg-event-fx\r\n :add-points\r\n (fn [{:keys [db]} [_ word]]\r\n   (let [curr-points (:points db)\r\n         new-points (+ curr-points\r\n                       (calculate-points word))]\r\n     {:db (assoc db :points new-points)\r\n      :dispatch [:calculate-ranking new-points]})))\r\n\r\n(defn calculate-ranking-text\r\n  \"Returns the corresponding ranking test for POINTS-RANKING\"\r\n  [points-ranking]\r\n  (condp = points-ranking\r\n    8 \"Genius\"\r\n    7 \"Amazing\"\r\n    6 \"Great\"\r\n    5 \"Nice\"\r\n    4 \"Solid\"\r\n    3 \"Good\"\r\n    2 \"Moving Up\"\r\n    1 \"Good Start\"\r\n    0 \"Beginner\"))\r\n\r\n(rf/reg-event-db\r\n :calculate-ranking\r\n (fn [db [_ points]]\r\n   (let [ranking (condp <= points\r\n                   65 8\r\n                   47 7\r\n                   37 6\r\n                   23 5\r\n                   14 4\r\n                   7  3\r\n                   5  2\r\n                   2  1\r\n                   0  0)]\r\n     (assoc db :points-ranking ranking))))\r\n\r\n(rf/reg-event-fx\r\n :new-toast-alert\r\n (fn [{:keys [db]} [_ message]]\r\n   {:db (assoc db :toast-message message)\r\n    :dispatch [:show-toast]\r\n    :timeout {:id :toast-message\r\n              :event [:hide-toast]\r\n              :time 3000}}))\r\n\r\n(rf/reg-event-db\r\n :word-input-add-letter\r\n (fn [db [_ letter]]\r\n   (let [letter-others (:letter-others db)\r\n         letter-core (:letter-core db)\r\n         color (cond\r\n                 (some (set letter-others) letter) \"black\"\r\n                 (some (set letter-core) letter) \"gold\"\r\n                 :else \"grey\")]\r\n     (assoc db :word-input (conj (:word-input db) [letter color])))))\r\n\r\n(rf/reg-event-db\r\n :shuffle-letters\r\n (fn [db _]\r\n   (assoc db :letter-others (shuffle (:letter-others db)))))\r\n\r\n(defn format-word\r\n  \"Returns a trimmed and capitalized WORD\"\r\n  [word]\r\n  (let [word (reduce #(str %1 (first %2)) \"\" word)]\r\n    (-> (clojure.string/trim word)\r\n        (clojure.string/capitalize))))\r\n\r\n(rf/reg-event-fx\r\n :insert-word\r\n (fn [{:keys [db]} [_ new-word]]\r\n   (let [new-word (format-word new-word)]\r\n     (cond\r\n       (> (count (clojure.string/split new-word #\"\\s\")) 1)\r\n       {:dispatch [:new-toast-alert \"ONE WORD ONLY\"]}\r\n\r\n       (some #{new-word} (:words-found db))\r\n       {:dispatch [:new-toast-alert \"WORD ALREADY EXISTS\"]}\r\n\r\n       (empty? new-word)\r\n       {:dispatch [:new-toast-alert \"EMPTY\"]}\r\n\r\n       (some (:allowed-words db) [(clojure.string/lower-case new-word)])\r\n       {:db (assoc db :words-found (conj (:words-found db) new-word))\r\n        :dispatch [:add-points new-word]}\r\n\r\n       :else\r\n       {:dispatch [:new-toast-alert \"NOT ALLOWED\"]}))))\r\n\r\n\r\n;; -- Domino 3 - Effect Handling  -------------------------------------------------------\r\n\r\n;; Sets javascript timeouts for animations\r\n(rf/reg-fx\r\n :timeout\r\n (fn [{:keys [id event time]}]\r\n   (when-some [existing (get @timeouts id)] ; If there is already a time out then clear it\r\n     (js/clearTimeout existing)\r\n     (swap! timeouts dissoc id))\r\n   (when (some? event) ; Add the timeout to the event and dispatch it\r\n     (swap! timeouts assoc id\r\n            (js/setTimeout\r\n             (fn []\r\n               (rf/dispatch event))\r\n             time)))))"]}