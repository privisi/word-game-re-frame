["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.trace');\r\ngoog.require('clojure.set');\r\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\r\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\r\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\r\n});\r\n/**\r\n * Create an interceptor from named arguments\r\n */\r\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___62178 = arguments.length;\r\nvar i__4737__auto___62179 = (0);\r\nwhile(true){\r\nif((i__4737__auto___62179 < len__4736__auto___62178)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___62179]));\r\n\r\nvar G__62180 = (i__4737__auto___62179 + (1));\r\ni__4737__auto___62179 = G__62180;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\r\n});\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__62161){\r\nvar map__62162 = p__62161;\r\nvar map__62162__$1 = (((((!((map__62162 == null))))?(((((map__62162.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62162.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62162):map__62162);\r\nvar m = map__62162__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62162__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62162__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\r\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62162__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5733__auto___62181 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\r\nif(temp__5733__auto___62181){\r\nvar unknown_keys_62182 = temp__5733__auto___62181;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_62182], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4126__auto__ = id;\r\nif(cljs.core.truth_(or__4126__auto__)){\r\nreturn or__4126__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\r\n}\r\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\r\n}));\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq62160){\r\nvar self__4724__auto__ = this;\r\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62160));\r\n}));\r\n\r\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\r\nvar G__62165 = arguments.length;\r\nswitch (G__62165) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\r\n});\r\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___62184 = arguments.length;\r\nvar i__4737__auto___62185 = (0);\r\nwhile(true){\r\nif((i__4737__auto___62185 < len__4736__auto___62184)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___62185]));\r\n\r\nvar G__62186 = (i__4737__auto___62185 + (1));\r\ni__4737__auto___62185 = G__62186;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq62166){\r\nvar G__62167 = cljs.core.first(seq62166);\r\nvar seq62166__$1 = cljs.core.next(seq62166);\r\nvar G__62168 = cljs.core.first(seq62166__$1);\r\nvar seq62166__$2 = cljs.core.next(seq62166__$1);\r\nvar G__62169 = cljs.core.first(seq62166__$2);\r\nvar seq62166__$3 = cljs.core.next(seq62166__$2);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__62167,G__62168,G__62169,seq62166__$3);\r\n}));\r\n\r\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\r\nvar G__62171 = arguments.length;\r\nswitch (G__62171) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\r\n});\r\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___62188 = arguments.length;\r\nvar i__4737__auto___62189 = (0);\r\nwhile(true){\r\nif((i__4737__auto___62189 < len__4736__auto___62188)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___62189]));\r\n\r\nvar G__62190 = (i__4737__auto___62189 + (1));\r\ni__4737__auto___62189 = G__62190;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq62172){\r\nvar G__62173 = cljs.core.first(seq62172);\r\nvar seq62172__$1 = cljs.core.next(seq62172);\r\nvar G__62174 = cljs.core.first(seq62172__$1);\r\nvar seq62172__$2 = cljs.core.next(seq62172__$1);\r\nvar G__62175 = cljs.core.first(seq62172__$2);\r\nvar seq62172__$3 = cljs.core.next(seq62172__$2);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__62173,G__62174,G__62175,seq62172__$3);\r\n}));\r\n\r\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\r\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar f = temp__5733__auto__;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\r\n} else {\r\nreturn context;\r\n}\r\n});\r\n/**\r\n * Loop over all interceptors, calling `direction` function on each,\r\n *   threading the value of `context` through every call.\r\n * \r\n *   `direction` is one of `:before` or `:after`.\r\n * \r\n *   Each iteration, the next interceptor to process is obtained from\r\n *   context's `:queue`. After they are processed, interceptors are popped\r\n *   from `:queue` and added to `:stack`.\r\n * \r\n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n *   contain all interceptors processed.\r\n * \r\n *   Returns updated `context`. Ie. the `context` which has been threaded\r\n *   through all interceptor functions.\r\n * \r\n *   Generally speaking, an interceptor's `:before` function will (if present)\r\n *   add to a `context's` `:coeffects`, while it's `:after` function\r\n *   will modify the `context`'s `:effects`.  Very approximately.\r\n * \r\n *   But because all interceptor functions are given `context`, and can\r\n *   return a modified version of it, the way is clear for an interceptor\r\n *   to introspect the stack or queue, or even modify the queue\r\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\r\n */\r\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\r\nvar context__$1 = context;\r\nwhile(true){\r\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nif(cljs.core.empty_QMARK_(queue)){\r\nreturn context__$1;\r\n} else {\r\nvar interceptor = cljs.core.peek(queue);\r\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nvar G__62191 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\r\ncontext__$1 = G__62191;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\r\n *   Returns the updated `context`.\r\n * \r\n *   In an advanced case, this function could allow an interceptor to add new\r\n *   interceptors to the `:queue` of a context.\r\n */\r\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\r\n});\r\n/**\r\n * Create a fresh context\r\n */\r\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\r\nvar G__62177 = arguments.length;\r\nswitch (G__62177) {\r\ncase 2:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\r\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\r\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Called on completion of `:before` processing, this function prepares/modifies\r\n * `context` for the backwards sweep of processing in which an interceptor\r\n * chain's `:after` fns are called.\r\n * \r\n *   At this point in processing, the `:queue` is empty and `:stack` holds all\r\n *   the previously run interceptors. So this function enables the backwards walk\r\n *   by priming `:queue` with what's currently in `:stack`\r\n */\r\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\r\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\r\n});\r\n/**\r\n * Executes the given chain (coll) of interceptors.\r\n * \r\n * Each interceptor has this form:\r\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\r\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n * \r\n * Walks the queue of iterceptors from beginning to end, calling the\r\n * `:before` fn on each, then reverse direction and walk backwards,\r\n * calling the `:after` fn on each.\r\n * \r\n * The last interceptor in the chain presumably wraps an event\r\n * handler fn. So the overall goal of the process is to \"handle\r\n * the given event\".\r\n * \r\n * Thread a `context` through all calls. `context` has this form:\r\n * \r\n *   {:coeffects {:event [:a-query-id :some-param]\r\n *                :db    <original contents of app-db>}\r\n *    :effects   {:db    <new value for app-db>\r\n *                :dispatch  [:an-event-id :param1]}\r\n *    :queue     <a collection of further interceptors>\r\n *    :stack     <a collection of interceptors already walked>}\r\n * \r\n * `context` has `:coeffects` and `:effects` which, if this was a web\r\n * server, would be somewhat anologous to `request` and `response`\r\n * respectively.\r\n * \r\n * `coeffects` will contain data like `event` and the initial\r\n * state of `db` -  the inputs required by the event handler\r\n * (sitting presumably on the end of the chain), while handler-returned\r\n * side effects are put into `:effects` including, but not limited to,\r\n * new values for `db`.\r\n * \r\n * The first few interceptors in a chain will likely have `:before`\r\n * functions which \"prime\" the `context` by adding the event, and\r\n * the current state of app-db into `:coeffects`. But interceptors can\r\n * add whatever they want to `:coeffects` - perhaps the event handler needs\r\n * some information from localstore, or a random number, or access to\r\n * a DataScript connection.\r\n * \r\n * Equally, some interceptors in the chain will have `:after` fn\r\n * which can process the side effects accumulated into `:effects`\r\n * including but, not limited to, updates to app-db.\r\n * \r\n * Through both stages (before and after), `context` contains a `:queue`\r\n * of interceptors yet to be processed, and a `:stack` of interceptors\r\n * already done.  In advanced cases, these values can be modified by the\r\n * functions through which the context is threaded.\r\n */\r\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62193 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62193);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^K","~$re-frame.interop","^L","~$re-frame.trace","^M","~$trace","^M","~$clojure.set","^O","~$set","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$console","^K","~$empty-queue","^L","~$debug-enabled?","^L"],"~:require-macros",["^ ","^M","^M","^N","^M","^Q","^Q"],"~:form",["~#list",["~$ns","^F",["^[",["^T",["^K","~:refer",["^V"]],["^L","^11",["^W","^X"]],["^M","~:as","^N","~:include-macros",true],["^O","^12","^P"]]]]],"~:flags",["^ ","^T",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^K","^L","^M","^O"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1590074292554,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__62161","map__62162","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq62160","self__4724__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5733__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4126__auto__","G__62165","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq62166","G__62167","cljs.core/first","cljs.core/next","G__62168","G__62169","self__4723__auto__","f","args","cljs.core/update-in","G__62171","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq62172","G__62173","G__62174","G__62175","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__62177","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__62083__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^D",["~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.interceptor/assoc-coeffect","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.interop/debug-enabled?","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1589988033000,1589988033000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^18","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","~$reagent.debug","~$reagent.impl.util"]]],["^18","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.dom.HtmlElement"]]],["^18","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.labs.userAgent.util","~$goog.string"]]],["^18","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.array","~$goog.asserts"]]],["^18","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2K","~$goog.object","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2P"]]],["^18","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^O"]]],["^18","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N"]]],["^2@","node_modules/prop-types/checkPropTypes.js"],[1589988033000,1589988033000,1549836454000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^18","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","~$clojure.string"]]],["^18","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2K","~$goog.reflect","^2L"]]],["^18","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^2@","node_modules/scheduler/cjs/scheduler.development.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^18","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^2I","^2H","~$reagent.impl.batching","^O","^2O"]]],["^2@","node_modules/scheduler/cjs/scheduler.production.min.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^18","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^18","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^2@","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^2@","node_modules/react/index.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^18","shadow/js.js"],["a9b6248f5bcd9480b4be9de7fccb49898ed962b8","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^A","^2X","~$clojure.walk","^2I","~$reagent.impl.component","^31","^34","^2H","^2O"]]],["^18","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N"]]],["^2@","node_modules/react-dom/cjs/react-dom.production.min.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","^A","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1589988033000,1589988033000,1589988018000],["^2@","node_modules/react/cjs/react.development.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","^39","~$module$node_modules$prop_types$checkPropTypes"]]],["^18","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","^30"]]],["^18","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","~$goog.html.trustedtypes","^2S","^2T","^2U","^2V"]]],["^18","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^2@","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^18","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","~$goog.html.SafeUrl","^2U","^2V","^2P"]]],["^18","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3>","^2R","~$goog.html.uncheckedconversions","^2U","^2P"]]],["^18","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^2O","^A","^2I","^31","^34","^2H"]]],["^18","clojure/walk.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q"]]],["^18","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","~$goog.dom.TagName","~$goog.dom.tags","^3B","^3C","~$goog.html.SafeStyleSheet","^3>","^2R","^3=","^2S","^2T","^2Y","^2O","^2U","^2V","^2P"]]],["^18","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2O"]]],["^18","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^2@","node_modules/scheduler/index.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^18","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2K","^2L"]]],["^18","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3G","~$goog.dom.safe","^3A","^3D","~$goog.math.Coordinate","~$goog.math.Size","^2O","^2L","~$goog.string.Unicode","~$goog.userAgent"]]],["^18","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.debug.Error","^3M"]]],["^18","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","^2L","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^2@","node_modules/object-assign/index.js"],[1589988033000,1589988033000,1484580833000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^18","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",[]]],["^18","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2O"]]],["^18","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^2L","~$goog.string.StringBuffer"]]],["^2@","node_modules/react/cjs/react.production.min.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","^39"]]],["^18","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N"]]],["^18","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^3N","^3D","^2U","^2P"]]],["^18","re_frame/interceptor.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^K","^L","^M","^O"]]],["^18","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2P"]]],["^18","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^A","~$reagent.impl.template","^38","^2I","^31","^34","^2H","~$reagent.dom"]]],["^18","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.math"]]],["^18","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","^3@","^40"]]],["^18","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.debug.entryPointRegistry","~$goog.dom","^3G","^3N","^3@","^3A","^2R","^2Y","^2Z","^2U"]]],["^18","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","^3A","^3B","^3C","^3I","^3>","^2R","^2U","^2P"]]],["^18","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^?","^2I","^3Z","^31","^34"]]],["^2@","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1589988033000,1589988033000,1549571078000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E"]]],["^18","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R"]]],["^18","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","~$goog.math.Long","~$goog.math.Integer","^2L","^2O","^2M","~$goog.Uri","^3Y"]]],["^18","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","^3=","^2U","^2V"]]],["^18","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q"]]],["^18","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","^3C","^2O","^2U","^2V","^2P"]]],["^18","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^30"]]],["^18","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^3R"]]],["^2@","node_modules/scheduler/tracing.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2@","node_modules/react-dom/cjs/react-dom.development.js"],[1589988033000,1589988033000,499162500000,"^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^2E","^A","^39","^3:","^3<","~$module$node_modules$scheduler$tracing"]]],["^18","clojure/set.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q"]]],["^18","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2M","^2N","^2L"]]],["^18","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^2N","^2V"]]],["^18","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2A",["^ ","^2B",null,"^2C",["^D",[]],"^2D",["^R","^Q","^L","^K","^3@"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1590067192000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1590067192000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1589532195000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1589988018000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^M","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^D",["^T"]],"~:shadow/js-access-global",["^D",["Error"]],"^U",["^ ","^V","^K","^W","^L","^X","^L"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",20,"~:arglists",["^[",["~$quote",["^[",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^[",["^54","^55","~$f","^56"]]],"^52",["^[",[["^54","^55","~$f","~$&","^56"]]],"~:arglists-meta",["^[",[null]]]],"^E","^1N","^6","re_frame/interceptor.cljc","^:",20,"^57",["^ ","^58",true,"^59",3,"^5:",3,"^5;",[["^[",["^54","^55","~$f","^56"]]],"^52",["^[",[["^54","^55","~$f","~$&","^56"]]],"^5<",["^[",[null]]],"^5;",[["^[",["^54","^55","~$f","^56"]]],"~:protocol-impl",null,"^59",3,"^5<",["^[",[null]],"^8",1,"^58",true,"~:methods",[["^ ","^59",3,"^58",true,"~:tag","~$any"]],"^7",43,"~:ret-tag","^5@","^9",43,"^5:",3,"~:fn-var",true,"^52",["^[",[["^54","^55","~$f","~$&","^56"]]]],"~$invoke-interceptors",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",75,"^8",8,"^9",75,"^:",27,"~:private",true,"^52",["^[",["^53",["^[",[["^54","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5D",true,"^E","^1P","^6","re_frame/interceptor.cljc","^:",27,"^5;",["^[",[["^54","^5E"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",75,"^9",75,"^5:",2,"^5B",true,"^52",["^[",["^53",["^[",[["^54","^5E"]]]]],"^5F","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",57,"^8",7,"^9",57,"^:",21,"^52",["^[",["^53",["^[",[["^54","^55","~$value"]]]]]],"^E","^20","^6","re_frame/interceptor.cljc","^:",21,"^5;",["^[",[["^54","^55","^5H"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",57,"^5A",["^D",["~$clj","^5@"]],"^9",57,"^5:",3,"^5B",true,"^52",["^[",["^53",["^[",[["^54","^55","^5H"]]]]]],"~$update-coeffect",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",22,"^52",["^[",["^53",["^[",[["^54","^55","~$f","~$&","^56"]]]]],"^57",["^ ","^58",true,"^59",3,"^5:",3,"^5;",[["^[",["^54","^55","~$f","^56"]]],"^52",["^[",[["^54","^55","~$f","~$&","^56"]]],"^5<",["^[",[null]]]],"^E","^1Z","^6","re_frame/interceptor.cljc","^:",22,"^57",["^ ","^58",true,"^59",3,"^5:",3,"^5;",[["^[",["^54","^55","~$f","^56"]]],"^52",["^[",[["^54","^55","~$f","~$&","^56"]]],"^5<",["^[",[null]]],"^5;",[["^[",["^54","^55","~$f","^56"]]],"^5=",null,"^59",3,"^5<",["^[",[null]],"^8",1,"^58",true,"^5>",[["^ ","^59",3,"^58",true,"^5?","^5@"]],"^7",61,"^5A","^5@","^9",61,"^5:",3,"^5B",true,"^52",["^[",[["^54","^55","~$f","~$&","^56"]]]],"~$invoke-interceptor-fn",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",68,"^8",8,"^9",68,"^:",29,"^5D",true,"^52",["^[",["^53",["^[",[["^54","~$interceptor","^5E"]]]]]],"^5D",true,"^E","^2;","^6","re_frame/interceptor.cljc","^:",29,"^5;",["^[",[["^54","^5L","^5E"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",68,"^5A",["^D",[null,"^5@"]],"^9",68,"^5:",3,"^5B",true,"^52",["^[",["^53",["^[",[["^54","^5L","^5E"]]]]]],"~$get-effect",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^52",["^[",["^53",["^[",[["^54"],["^54","^55"],["^54","^55","~$not-found"]]]]],"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]],"^5<",["^[",[null,null,null]]]],"^E","^1E","^6","re_frame/interceptor.cljc","^:",17,"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]],"^5<",["^[",[null,null,null]]],"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^5=",null,"^59",3,"^5<",["^[",[null,null,null]],"^8",1,"^58",false,"^5>",[["^ ","^59",1,"^58",false,"^5?","^5@"],["^ ","^59",2,"^58",false,"^5?",["^D",[null,"^5@"]]],["^ ","^59",3,"^58",false,"^5?",["^D",[null,"^5@"]]]],"^7",31,"^9",31,"^5:",3,"^5B",true,"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]]],"~$->interceptor",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^52",["^[",["^53",["^[",[["~$&",["^ ","^12","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5F","Create an interceptor from named arguments","^57",["^ ","^58",true,"^59",0,"^5:",0,"^5;",[["^[",[["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^52",["^[",[["~$&",["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5<",["^[",[null]]]],"^E","^1I","^6","re_frame/interceptor.cljc","^:",20,"^57",["^ ","^58",true,"^59",0,"^5:",0,"^5;",[["^[",[["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^52",["^[",[["~$&",["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5<",["^[",[null]]],"^5;",[["^[",[["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5=",null,"^59",0,"^5<",["^[",[null]],"^8",1,"^58",true,"^5>",[["^ ","^59",0,"^58",true,"^5?","~$cljs.core/IMap"]],"^7",17,"^5A","^5@","^9",17,"^5:",0,"^5B",true,"^52",["^[",[["~$&",["^ ","^12","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5F","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",49,"^8",7,"^9",49,"^:",19,"^52",["^[",["^53",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]]]],"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]],"^5<",["^[",[null,null,null]]]],"^E","^23","^6","re_frame/interceptor.cljc","^:",19,"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]],"^5<",["^[",[null,null,null]]],"^5;",[["^54"],["^54","^55"],["^54","^55","^5N"]],"^5=",null,"^59",3,"^5<",["^[",[null,null,null]],"^8",1,"^58",false,"^5>",[["^ ","^59",1,"^58",false,"^5?","^5@"],["^ ","^59",2,"^58",false,"^5?",["^D",[null,"^5@"]]],["^ ","^59",3,"^58",false,"^5?",["^D",[null,"^5@"]]]],"^7",49,"^9",49,"^5:",3,"^5B",true,"^52",["^[",[["^54"],["^54","^55"],["^54","^55","^5N"]]]],"~$execute",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",149,"^8",7,"^9",149,"^:",14,"^52",["^[",["^53",["^[",[["~$event-v","~$interceptors"]]]]],"^5F","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^E","^1H","^6","re_frame/interceptor.cljc","^:",14,"^5;",["^[",[["^5W","^5X"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",149,"^5A","^5@","^9",149,"^5:",2,"^5B",true,"^52",["^[",["^53",["^[",[["^5W","^5X"]]]]],"^5F","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",39,"^8",7,"^9",39,"^:",19,"^52",["^[",["^53",["^[",[["^54","^55","^5H"]]]]]],"^E","^25","^6","re_frame/interceptor.cljc","^:",19,"^5;",["^[",[["^54","^55","^5H"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",39,"^5A",["^D",["^5I","^5@"]],"^9",39,"^5:",3,"^5B",true,"^52",["^[",["^53",["^[",[["^54","^55","^5H"]]]]]],"~$enqueue",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",112,"^8",7,"^9",112,"^:",14,"^52",["^[",["^53",["^[",[["^54","^5X"]]]]],"^5F","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^E","^1S","^6","re_frame/interceptor.cljc","^:",14,"^5;",["^[",[["^54","^5X"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",112,"^5A",["^D",["^5I","^5@"]],"^9",112,"^5:",2,"^5B",true,"^52",["^[",["^53",["^[",[["^54","^5X"]]]]],"^5F","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^E","^2=","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5?","~$cljs.core/ISet"],"~$interceptor?",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^52",["^[",["^53",["^[",[["~$m"]]]]]],"^E","^26","^6","re_frame/interceptor.cljc","^:",19,"^5;",["^[",[["~$m"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",11,"^5A","~$boolean","^9",11,"^5:",1,"^5B",true,"^52",["^[",["^53",["^[",[["~$m"]]]]]],"~$change-direction",["^ ","^51",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",135,"^8",8,"^9",135,"^:",24,"^5D",true,"^52",["^[",["^53",["^[",[["^54"]]]]],"^5F","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5D",true,"^E","^21","^6","re_frame/interceptor.cljc","^:",24,"^5;",["^[",[["^54"]]],"^5=",null,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^7",135,"^5A",["^D",["^5I","^5@"]],"^9",135,"^5:",1,"^5B",true,"^52",["^[",["^53",["^[",[["^54"]]]]],"^5F","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^54",["^ ","^51",null,"^5",["^ ","^5D",true,"^6","re_frame/interceptor.cljc","^:",15,"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["~$event","^5X"],["^64","^5X","~$db"]],"^52",["^[",[["^64","^5X"],["^64","^5X","^65"]]],"^5<",["^[",[null,null]]],"^8",8,"^7",124,"^9",124,"^52",["^[",["^53",["^[",[["^64","^5X"],["^64","^5X","^65"]]]]],"^5F","Create a fresh context"],"^5D",true,"^E","^1D","^6","re_frame/interceptor.cljc","^:",15,"^57",["^ ","^58",false,"^59",3,"^5:",3,"^5;",[["^64","^5X"],["^64","^5X","^65"]],"^52",["^[",[["^64","^5X"],["^64","^5X","^65"]]],"^5<",["^[",[null,null]]],"^5;",[["^64","^5X"],["^64","^5X","^65"]],"^5=",null,"^59",3,"^5<",["^[",[null,null]],"^8",1,"^58",false,"^5>",[["^ ","^59",2,"^58",false,"^5?",["^D",["^5I","^5@"]]],["^ ","^59",3,"^58",false,"^5?",["^D",["^5I","^5@"]]]],"^7",124,"^9",124,"^5:",3,"^5B",true,"^52",["^[",[["^64","^5X"],["^64","^5X","^65"]]],"^5F","Create a fresh context"]],"^Y",["^ ","^M","^M","^N","^M","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^D",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6<","^6=","^6C","^6@","^67","^6>","^6A","^6:","^6?","^6;","^69","^68","^6B"]],"^14",["^ ","^T",["^D",[]]],"^15",["^ "],"^16",["^R","^Q","^K","^L","^M","^O"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2?",[["^6G","~:static-fns"],true,["^6G","~:shadow-tweaks"],null,["^6G","~:source-map-inline"],null,["^6G","~:elide-asserts"],false,["^6G","~:optimize-constants"],null,["^6G","^1;"],null,["^6G","~:external-config"],null,["^6G","~:tooling-config"],null,["^6G","~:emit-constants"],null,["^6G","~:load-tests"],null,["^6G","~:form-size-threshold"],null,["^6G","~:infer-externs"],true,["^6G","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6G","~:fn-invoke-direct"],null,["^6G","~:source-map"],"/dev/null"]]]