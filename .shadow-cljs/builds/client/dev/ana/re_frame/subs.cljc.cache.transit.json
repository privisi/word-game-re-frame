["^ ","~:output",["^ ","~:js","goog.provide('re_frame.subs');\r\ngoog.require('cljs.core');\r\ngoog.require('re_frame.db');\r\ngoog.require('re_frame.interop');\r\ngoog.require('re_frame.loggers');\r\ngoog.require('re_frame.utils');\r\ngoog.require('re_frame.registrar');\r\ngoog.require('re_frame.trace');\r\nre_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\r\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind) : re_frame.registrar.kinds.call(null,re_frame.subs.kind)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\r\n}\r\nre_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\n/**\r\n * Causes all subscriptions to be removed from the cache.\r\n *   Does this by:\r\n *   1. running `on-dispose` on all cached subscriptions\r\n *   2. Each `on-dispose` will perform the removal of themselves.\r\n * \r\n *   This is for development time use. Useful when reloading Figwheel code\r\n *   after a React exception, because React components won't have been\r\n *   cleaned up properly. And this, in turn, means the subscriptions within those\r\n *   components won't have been cleaned up correctly. So this forces the issue.\r\n */\r\nre_frame.subs.clear_subscription_cache_BANG_ = (function re_frame$subs$clear_subscription_cache_BANG_(){\r\nvar seq__62207_62263 = cljs.core.seq(cljs.core.deref(re_frame.subs.query__GT_reaction));\r\nvar chunk__62208_62264 = null;\r\nvar count__62209_62265 = (0);\r\nvar i__62210_62266 = (0);\r\nwhile(true){\r\nif((i__62210_62266 < count__62209_62265)){\r\nvar vec__62217_62267 = chunk__62208_62264.cljs$core$IIndexed$_nth$arity$2(null,i__62210_62266);\r\nvar k_62268 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62217_62267,(0),null);\r\nvar rxn_62269 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62217_62267,(1),null);\r\nre_frame.interop.dispose_BANG_(rxn_62269);\r\n\r\n\r\nvar G__62270 = seq__62207_62263;\r\nvar G__62271 = chunk__62208_62264;\r\nvar G__62272 = count__62209_62265;\r\nvar G__62273 = (i__62210_62266 + (1));\r\nseq__62207_62263 = G__62270;\r\nchunk__62208_62264 = G__62271;\r\ncount__62209_62265 = G__62272;\r\ni__62210_62266 = G__62273;\r\ncontinue;\r\n} else {\r\nvar temp__5735__auto___62274 = cljs.core.seq(seq__62207_62263);\r\nif(temp__5735__auto___62274){\r\nvar seq__62207_62275__$1 = temp__5735__auto___62274;\r\nif(cljs.core.chunked_seq_QMARK_(seq__62207_62275__$1)){\r\nvar c__4556__auto___62276 = cljs.core.chunk_first(seq__62207_62275__$1);\r\nvar G__62277 = cljs.core.chunk_rest(seq__62207_62275__$1);\r\nvar G__62278 = c__4556__auto___62276;\r\nvar G__62279 = cljs.core.count(c__4556__auto___62276);\r\nvar G__62280 = (0);\r\nseq__62207_62263 = G__62277;\r\nchunk__62208_62264 = G__62278;\r\ncount__62209_62265 = G__62279;\r\ni__62210_62266 = G__62280;\r\ncontinue;\r\n} else {\r\nvar vec__62220_62281 = cljs.core.first(seq__62207_62275__$1);\r\nvar k_62282 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62220_62281,(0),null);\r\nvar rxn_62283 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62220_62281,(1),null);\r\nre_frame.interop.dispose_BANG_(rxn_62283);\r\n\r\n\r\nvar G__62284 = cljs.core.next(seq__62207_62275__$1);\r\nvar G__62285 = null;\r\nvar G__62286 = (0);\r\nvar G__62287 = (0);\r\nseq__62207_62263 = G__62284;\r\nchunk__62208_62264 = G__62285;\r\ncount__62209_62265 = G__62286;\r\ni__62210_62266 = G__62287;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(re_frame.subs.query__GT_reaction)))){\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Unregisters all existing subscription handlers\r\n */\r\nre_frame.subs.clear_all_handlers_BANG_ = (function re_frame$subs$clear_all_handlers_BANG_(){\r\nre_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind);\r\n\r\nreturn re_frame.subs.clear_subscription_cache_BANG_();\r\n});\r\n/**\r\n * cache the reaction r\r\n */\r\nre_frame.subs.cache_and_return = (function re_frame$subs$cache_and_return(query_v,dynv,r){\r\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\r\nre_frame.interop.add_on_dispose_BANG_(r,(function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__62223 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__62224 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__62224);\r\n\r\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\r\n} else {\r\nreturn query_cache;\r\n}\r\n}));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__62081__auto___62288 = re_frame.interop.now();\r\nvar duration__62082__auto___62289 = (end__62081__auto___62288 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__62082__auto___62289,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__62081__auto___62288);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__62223);\r\n}} else {\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\r\n} else {\r\nreturn query_cache;\r\n}\r\n}));\r\n}\r\n}));\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,(function (query_cache){\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\r\n}));\r\n\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62290 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62290);\r\n\r\n} else {\r\n}\r\n\r\nreturn r;\r\n});\r\nre_frame.subs.cache_lookup = (function re_frame$subs$cache_lookup(var_args){\r\nvar G__62226 = arguments.length;\r\nswitch (G__62226) {\r\ncase 1:\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\r\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\r\n}));\r\n\r\n(re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Given a `query`, returns a Reagent `reaction` which, over\r\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\r\n *   it returns a `Signal`.\r\n * \r\n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\r\n * \r\n *   `query` is a vector of at least one element. The first element is the\r\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\r\n *   elements are optional, additional values which parameterise the query\r\n *   performed.\r\n * \r\n *   `dynv` is an optional 3rd argument, which is a vector of further input\r\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\r\n *   historical reasons and is borderline deprecated these days.\r\n * \r\n *   Example Usage:\r\n *   --------------\r\n * \r\n *  (subscribe [:items])\r\n *  (subscribe [:items \"blue\" :small])\r\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\r\n * \r\n *   Note: for any given call to `subscribe` there must have been a previous call\r\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\r\n * \r\n *   Hint\r\n *   ----\r\n * \r\n *   When used in a view function BE SURE to `deref` the returned value.\r\n *   In fact, to avoid any mistakes, some prefer to define:\r\n * \r\n *   (def <sub  (comp deref re-frame.core/subscribe))\r\n * \r\n *   And then, within their views, they call  `(<sub [:items :small])` rather\r\n *   than using `subscribe` directly.\r\n * \r\n *   De-duplication\r\n *   --------------\r\n * \r\n *   XXX\r\n *   \r\n */\r\nre_frame.subs.subscribe = (function re_frame$subs$subscribe(var_args){\r\nvar G__62228 = arguments.length;\r\nswitch (G__62228) {\r\ncase 1:\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__62229 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__62230 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__62230);\r\n\r\ntry{try{var temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar cached = temp__5733__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62293 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62293);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62294 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62294);\r\n\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62295 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62295);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\r\n}\r\n}\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__62081__auto___62296 = re_frame.interop.now();\r\nvar duration__62082__auto___62297 = (end__62081__auto___62296 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__62082__auto___62297,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__62081__auto___62296);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__62229);\r\n}} else {\r\nvar temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar cached = temp__5733__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62298 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62298);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62299 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62299);\r\n\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62300 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62300);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__62231 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__62232 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__62232);\r\n\r\ntry{try{var temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar cached = temp__5733__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62301 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62301);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62302 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62302);\r\n\r\n} else {\r\n}\r\n\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5735__auto___62303 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\r\nif(cljs.core.truth_(temp__5735__auto___62303)){\r\nvar not_reactive_62304 = temp__5735__auto___62303;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_62304], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62305 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62305);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nvar dyn_vals = re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\r\n}));\r\nvar sub = re_frame.interop.make_reaction((function (){\r\nvar G__62233 = re_frame.db.app_db;\r\nvar G__62234 = query;\r\nvar G__62235 = cljs.core.deref(dyn_vals);\r\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__62233,G__62234,G__62235) : handler_fn.call(null,G__62233,G__62234,G__62235));\r\n}));\r\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.deref(cljs.core.deref(sub));\r\n})));\r\n}\r\n}\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__62081__auto___62306 = re_frame.interop.now();\r\nvar duration__62082__auto___62307 = (end__62081__auto___62306 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__62082__auto___62307,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__62081__auto___62306);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__62231);\r\n}} else {\r\nvar temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar cached = temp__5733__auto__;\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62308 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62308);\r\n\r\n} else {\r\n}\r\n\r\nreturn cached;\r\n} else {\r\nvar query_id = re_frame.utils.first_in_vector(query);\r\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62309 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62309);\r\n\r\n} else {\r\n}\r\n\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5735__auto___62310 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\r\nif(cljs.core.truth_(temp__5735__auto___62310)){\r\nvar not_reactive_62311 = temp__5735__auto___62310;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_62311], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nif((handler_fn == null)){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62312 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62312);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\r\n} else {\r\nvar dyn_vals = re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\r\n}));\r\nvar sub = re_frame.interop.make_reaction((function (){\r\nvar G__62236 = re_frame.db.app_db;\r\nvar G__62237 = query;\r\nvar G__62238 = cljs.core.deref(dyn_vals);\r\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__62236,G__62237,G__62238) : handler_fn.call(null,G__62236,G__62237,G__62238));\r\n}));\r\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction((function (){\r\nreturn cljs.core.deref(cljs.core.deref(sub));\r\n})));\r\n}\r\n}\r\n}\r\n}));\r\n\r\n(re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Returns a new version of 'm' in which 'f' has been applied to each value.\r\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\r\n */\r\nre_frame.subs.map_vals = (function re_frame$subs$map_vals(f,m){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__62239){\r\nvar vec__62240 = p__62239;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62240,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62240,(1),null);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\r\n})),m);\r\n});\r\n/**\r\n * Runs f over signals. Signals may take several\r\n *   forms, this function handles all of them.\r\n */\r\nre_frame.subs.map_signals = (function re_frame$subs$map_signals(f,signals){\r\nif(cljs.core.sequential_QMARK_(signals)){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\r\n} else {\r\nif(cljs.core.map_QMARK_(signals)){\r\nreturn re_frame.subs.map_vals(f,signals);\r\n} else {\r\nif(re_frame.interop.deref_QMARK_(signals)){\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\r\n} else {\r\nreturn cljs.core.List.EMPTY;\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Coerces x to a seq if it isn't one already\r\n */\r\nre_frame.subs.to_seq = (function re_frame$subs$to_seq(x){\r\nif(cljs.core.sequential_QMARK_(x)){\r\nreturn x;\r\n} else {\r\nreturn (new cljs.core.List(null,x,null,(1),null));\r\n}\r\n});\r\nre_frame.subs.deref_input_signals = (function re_frame$subs$deref_input_signals(signals,query_id){\r\nvar dereffed_signals = re_frame.subs.map_signals(cljs.core.deref,signals);\r\nif(cljs.core.sequential_QMARK_(signals)){\r\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\r\n} else {\r\nif(cljs.core.map_QMARK_(signals)){\r\nre_frame.subs.map_vals(cljs.core.deref,signals);\r\n} else {\r\nif(re_frame.interop.deref_QMARK_(signals)){\r\ncljs.core.deref(signals);\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\r\n\r\n}\r\n}\r\n}\r\n\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62313 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62313);\r\n\r\n} else {\r\n}\r\n\r\nreturn dereffed_signals;\r\n});\r\n/**\r\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\r\n *   \r\n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\r\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\r\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \r\n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \r\n * \r\n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\r\n *   from which nodes can be created later. \r\n *   \r\n *   `reg-sub` arguments are:  \r\n *  - a `query-id` (typically a namespaced keyword)\r\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \r\n *  - a function which computes the value of this kind of node \r\n * \r\n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \r\n *  `(input-values, query-vector) -> a-value`\r\n *   \r\n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \r\n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \r\n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\r\n * \r\n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \r\n *   but whatever is there defines the `input signals` part of the template, controlling what input \r\n *  values \"flow into\" the `computation function` gets when it is called. \r\n * \r\n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\r\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \r\n *   two are really just sugary variations. \r\n * \r\n *   1. No input signals given:\r\n *    ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n * \r\n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\r\n *   and, as a result, the value within `app-db` (a map) is\r\n *   is given as the 1st argument when `a-computation-fn` is called.   \r\n *  \r\n * \r\n *   2. A signal function is explicitly supplied:\r\n *   ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     signal-fn     ;; <-- here\r\n *     computation-fn)\r\n *   ```\r\n *   \r\n *   This is the most canonical and instructive of the three variations.\r\n *   \r\n *   When a node is created from the template, the `signal-fn` will be called and it\r\n *   is expected to return the input signal(s) as either a singleton, if there is only\r\n *   one, or a sequence if there are many, or a map with the signals as the values.\r\n * \r\n *   The values from returned nominated signals will be supplied as the 1st argument to  \r\n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \r\n *   this value will be either a singleton, sequence or map of them (paralleling\r\n *   the structure returned by the `signal-fn`).\r\n * \r\n *   This example `signal-fn` returns a vector of input signals.\r\n *     ```clj\r\n *     (fn [query-vec dynamic-vec]\r\n *       [(subscribe [:a-sub])\r\n *        (subscribe [:b-sub])])\r\n *     ```\r\n *   The associated computation function must be written\r\n *   to expect a vector of values for its first argument:\r\n *     ```clj\r\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\r\n *       ....)\r\n *      ```\r\n * \r\n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\r\n *      ```clj\r\n *      (fn [query-vec dynamic-vec]\r\n *        (subscribe [:a-sub]))\r\n *      ```\r\n *   then the associated computation function must be written to expect a single value\r\n *   as the 1st argument:\r\n *      ```clj\r\n *      (fn [a query-vec]       ;; 1st argument is a single value\r\n *        ...)\r\n *      ```\r\n *  \r\n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\r\n *     ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n *   is the equivalent of using this\r\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\r\n *   ```clj\r\n *   (reg-sub\r\n *     :query-id\r\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \r\n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\r\n *   ```\r\n *  \r\n *   3. Syntax Sugar\r\n * \r\n *   ```clj\r\n *   (reg-sub\r\n *     :a-b-sub\r\n *     :<- [:a-sub]\r\n *     :<- [:b-sub]\r\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\r\n *       {:a a :b b}))\r\n *   ```\r\n * \r\n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\r\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\r\n * \r\n *   If you supply only one pair a singleton will be supplied to the computation function, \r\n *   as if you had supplied a `signal-fn` returning only a single value:\r\n * \r\n *   ```clj\r\n *   (reg-sub\r\n *     :a-sub\r\n *     :<- [:a-sub]\r\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\r\n *       ...))\r\n *   ```\r\n * \r\n *   For further understanding, read `/docs`, and look at the detailed comments in\r\n *   /examples/todomvc/src/subs.cljs\r\n *   \r\n */\r\nre_frame.subs.reg_sub = (function re_frame$subs$reg_sub(var_args){\r\nvar args__4742__auto__ = [];\r\nvar len__4736__auto___62314 = arguments.length;\r\nvar i__4737__auto___62315 = (0);\r\nwhile(true){\r\nif((i__4737__auto___62315 < len__4736__auto___62314)){\r\nargs__4742__auto__.push((arguments[i__4737__auto___62315]));\r\n\r\nvar G__62316 = (i__4737__auto___62315 + (1));\r\ni__4737__auto___62315 = G__62316;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\r\nreturn re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\r\n});\r\n\r\n(re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\r\nvar computation_fn = cljs.core.last(args);\r\nvar input_args = cljs.core.butlast(args);\r\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\r\nvar inputs_fn = (function (){var G__62245 = cljs.core.count(input_args);\r\nswitch (G__62245) {\r\ncase (0):\r\nreturn (function() {\r\nvar G__62318 = null;\r\nvar G__62318__1 = (function (_){\r\nreturn re_frame.db.app_db;\r\n});\r\nvar G__62318__2 = (function (_,___$1){\r\nreturn re_frame.db.app_db;\r\n});\r\nG__62318 = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn G__62318__1.call(this,_);\r\ncase 2:\r\nreturn G__62318__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nG__62318.cljs$core$IFn$_invoke$arity$1 = G__62318__1;\r\nG__62318.cljs$core$IFn$_invoke$arity$2 = G__62318__2;\r\nreturn G__62318;\r\n})()\r\n\r\nbreak;\r\ncase (1):\r\nvar f = cljs.core.first(input_args);\r\nif(cljs.core.fn_QMARK_(f)){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\r\n}\r\n\r\nreturn f;\r\n\r\nbreak;\r\ncase (2):\r\nvar vec__62246 = input_args;\r\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62246,(0),null);\r\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62246,(1),null);\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\r\n}\r\n\r\nreturn (function() {\r\nvar re_frame$subs$inp_fn = null;\r\nvar re_frame$subs$inp_fn__1 = (function (_){\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\r\n});\r\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\r\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\r\n});\r\nre_frame$subs$inp_fn = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn re_frame$subs$inp_fn__1.call(this,_);\r\ncase 2:\r\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\r\nreturn re_frame$subs$inp_fn;\r\n})()\r\n\r\nbreak;\r\ndefault:\r\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\r\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\r\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\r\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\r\n}\r\n\r\nreturn (function() {\r\nvar re_frame$subs$inp_fn = null;\r\nvar re_frame$subs$inp_fn__1 = (function (_){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\r\n});\r\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\r\n});\r\nre_frame$subs$inp_fn = function(_,___$1){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn re_frame$subs$inp_fn__1.call(this,_);\r\ncase 2:\r\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\r\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\r\nreturn re_frame$subs$inp_fn;\r\n})()\r\n\r\n}\r\n})();\r\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,(function() {\r\nvar re_frame$subs$subs_handler_fn = null;\r\nvar re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\r\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\r\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar reaction = re_frame.interop.make_reaction((function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__62249 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__62250 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__62250);\r\n\r\ntry{try{var subscription = (function (){var G__62251 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__62252 = query_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__62251,G__62252) : computation_fn.call(null,G__62251,G__62252));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62319 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62319);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__62081__auto___62320 = re_frame.interop.now();\r\nvar duration__62082__auto___62321 = (end__62081__auto___62320 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__62082__auto___62321,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__62081__auto___62320);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__62249);\r\n}} else {\r\nvar subscription = (function (){var G__62253 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__62254 = query_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__62253,G__62254) : computation_fn.call(null,G__62253,G__62254));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62322 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62322);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}\r\n}));\r\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\r\n\r\nreturn reaction;\r\n});\r\nvar re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\r\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\r\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar reaction = re_frame.interop.make_reaction((function (){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar _STAR_current_trace_STAR__orig_val__62255 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__62256 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__62256);\r\n\r\ntry{try{var subscription = (function (){var G__62257 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__62258 = query_vec;\r\nvar G__62259 = dyn_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__62257,G__62258,G__62259) : computation_fn.call(null,G__62257,G__62258,G__62259));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62323 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62323);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__62081__auto___62324 = re_frame.interop.now();\r\nvar duration__62082__auto___62325 = (end__62081__auto___62324 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__62082__auto___62325,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__62081__auto___62324);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__62255);\r\n}} else {\r\nvar subscription = (function (){var G__62260 = re_frame.subs.deref_input_signals(subscriptions,query_id);\r\nvar G__62261 = query_vec;\r\nvar G__62262 = dyn_vec;\r\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__62260,G__62261,G__62262) : computation_fn.call(null,G__62260,G__62261,G__62262));\r\n})();\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__62083__auto___62326 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__62083__auto___62326);\r\n\r\n} else {\r\n}\r\n\r\nreturn subscription;\r\n}\r\n}));\r\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\r\n\r\nreturn reaction;\r\n});\r\nre_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\r\nswitch(arguments.length){\r\ncase 2:\r\nreturn re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\r\ncase 3:\r\nreturn re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$subs_handler_fn__2;\r\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = re_frame$subs$subs_handler_fn__3;\r\nreturn re_frame$subs$subs_handler_fn;\r\n})()\r\n);\r\n}));\r\n\r\n(re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq62243){\r\nvar G__62244 = cljs.core.first(seq62243);\r\nvar seq62243__$1 = cljs.core.next(seq62243);\r\nvar self__4723__auto__ = this;\r\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__62244,seq62243__$1);\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^K","~$re-frame.trace","^L","~$re-frame.registrar","^M","~$cljs.core","^N","~$goog","^O","~$trace","^L","~$re-frame.utils","^Q","~$re-frame.loggers","^R","~$re-frame.db","^S"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$reagent-id","^K","~$console","^R","~$app-db","^S","~$dispose!","^K","~$add-on-dispose!","^K","~$make-reaction","^K","~$get-handler","^M","~$first-in-vector","^Q","~$deref?","^K","~$ratom?","^K","~$debug-enabled?","^K","~$clear-handlers","^M","~$register-handler","^M"],"~:require-macros",["^ ","^L","^L","^P","^L","^N","^N"],"~:form",["~#list",["~$ns","^F",["^1:",["^U",["^S","~:refer",["^Y"]],["^K","^1<",["^[","^15","^10","^14","^13","^Z","^W"]],["^R","^1<",["^X"]],["^Q","^1<",["^12"]],["^M","^1<",["^11","^16","^17"]],["^L","~:as","^P","~:include-macros",true]]]]],"~:flags",["^ ","^U",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^S","^K","^R","^Q","^M","^L"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/subs.cljc"],"~:compiled-at",1590074293371,"~:resource-name","re_frame/subs.cljc","~:warnings",[],"~:source","(ns re-frame.subs\n (:require\n   [re-frame.db        :refer [app-db]]\n   [re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [re-frame.loggers   :refer [console]]\n   [re-frame.utils     :refer [first-in-vector]]\n   [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.subs/kind","js/Error","re-frame.registrar/kinds","re-frame.subs/query->reaction","cljs.core.atom","re-frame.subs/clear-subscription-cache!","seq__62207","cljs.core/seq","cljs.core/deref","chunk__62208","count__62209","i__62210","vec__62217","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__62220","cljs.core/first","cljs.core/next","k","rxn","re-frame.interop/dispose!","cljs.core/not-empty","re_frame.loggers.console","re-frame.subs/clear-all-handlers!","re_frame.registrar.clear_handlers","re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","re-frame.interop/add-on-dispose!","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__62223","re-frame.trace/*current-trace*","*current-trace*-temp-val__62224","re-frame.trace/start-trace","end__62081__auto__","re-frame.interop/now","duration__62082__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","re-frame.utils/first-in-vector","re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","re-frame.interop/debug-enabled?","new-trace__62083__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__62226","re-frame.subs/cache-lookup","re_frame.subs.cache_lookup","dyn-v","G__62228","re-frame.subs/subscribe","query","*current-trace*-orig-val__62229","*current-trace*-temp-val__62230","temp__5733__auto__","cached","query-id","handler-fn","re_frame.registrar.get_handler","re-frame.db/app-db","*current-trace*-orig-val__62231","*current-trace*-temp-val__62232","not-reactive","cljs.core.remove","re-frame.interop/ratom?","dyn-vals","re-frame.interop/make-reaction","cljs.core.mapv","sub","G__62233","G__62234","G__62235","G__62236","G__62237","G__62238","re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__62239","vec__62240","v","re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","re-frame.interop/deref?","re-frame.subs/to-seq","x","cljs.core/List","re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.subs/reg-sub","seq62243","G__62244","self__4723__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__62245","_","cljs.core/fn?","vec__62246","marker","vec","cljs.core._EQ_","re_frame.subs.subscribe","pairs","cljs.core.partition","markers","vecs","cljs.core/every?","cljs.core/vector?","re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__62249","*current-trace*-temp-val__62250","subscription","G__62251","G__62252","G__62253","G__62254","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__62255","*current-trace*-temp-val__62256","G__62257","G__62258","G__62259","G__62260","G__62261","G__62262"]],"~:used-vars",["^D",["~$cljs.core/sequential?","~$re-frame.db/app-db","~$re-frame.interop/reagent-id","~$re-frame.subs/map-vals","~$re-frame.interop/dispose!","~$re-frame.trace/traces","~$cljs.core/count","~$cljs.core/deref","~$re-frame.subs/clear-all-handlers!","~$re-frame.registrar/clear-handlers","~$re-frame.registrar/kinds","~$re-frame.loggers/console","~$cljs.core/dissoc","~$cljs.core/chunk-rest","~$cljs.core/atom","~$re-frame.interop/now","~$re-frame.subs/map-signals","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$re-frame.registrar/register-handler","~$re-frame.subs/clear-subscription-cache!","~$cljs.core/conj","~$re-frame.subs/kind","~$cljs.core/map","~$re-frame.subs/cache-lookup","~$re-frame.interop/deref?","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/swap!","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.subs/subscribe","~$re-frame.interop/make-reaction","~$re-frame.subs/to-seq","~$re-frame.subs/cache-and-return","~$cljs.core/not-empty","~$re-frame.subs/reg-sub","~$re-frame.interop/add-on-dispose!","~$re-frame.trace/*current-trace*","~$re-frame.subs/deref-input-signals","~$cljs.core/next","~$re-frame.subs/query->reaction","~$cljs.core/assoc","~$re-frame.trace/run-tracing-callbacks!","~$re-frame.interop/debug-enabled?","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1589988033000,1589988033000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1C","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","~$reagent.debug","~$reagent.impl.util"]]],["^1C","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.dom.HtmlElement"]]],["^1C","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.labs.userAgent.util","~$goog.string"]]],["^1C","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.array","~$goog.asserts"]]],["^1C","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^35","~$goog.object","~$goog.string.internal"]]],["^1C","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3:"]]],["^1C","re_frame/loggers.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","~$clojure.set"]]],["^1C","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38"]]],["^2V","node_modules/prop-types/checkPropTypes.js"],[1589988033000,1589988033000,1549836454000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1C","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","~$clojure.string"]]],["^1C","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^35","~$goog.reflect","^36"]]],["^1C","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","re_frame/registrar.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^K","^R"]]],["^1C","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^2V","node_modules/scheduler/cjs/scheduler.development.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^1C","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^33","^32","~$reagent.impl.batching","^3A","^39"]]],["^2V","node_modules/scheduler/cjs/scheduler.production.min.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^1C","re_frame/interop.cljs"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1C","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^2V","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^2V","node_modules/react/index.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1C","shadow/js.js"],["a9b6248f5bcd9480b4be9de7fccb49898ed962b8","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^A","^3C","~$clojure.walk","^33","~$reagent.impl.component","^3H","^3K","^32","^39"]]],["^1C","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38"]]],["^2V","node_modules/react-dom/cjs/react-dom.production.min.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","^A","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1589988033000,1589988033000,1589988018000],["^2V","node_modules/react/cjs/react.development.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","^3P","~$module$node_modules$prop_types$checkPropTypes"]]],["^1C","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","^3G"]]],["^1C","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","~$goog.html.trustedtypes","^3=","^3>","^3?","^3@"]]],["^1C","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^2V","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^1C","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","~$goog.html.SafeUrl","^3?","^3@","^3:"]]],["^1C","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3U","^3<","~$goog.html.uncheckedconversions","^3?","^3:"]]],["^1C","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^39","^A","^33","^3H","^3K","^32"]]],["^1C","clojure/walk.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N"]]],["^1C","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1C","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","~$goog.dom.TagName","~$goog.dom.tags","^3Y","^3Z","~$goog.html.SafeStyleSheet","^3U","^3<","^3T","^3=","^3>","^3D","^39","^3?","^3@","^3:"]]],["^1C","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^39"]]],["^1C","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^2V","node_modules/scheduler/index.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1C","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^35","^36"]]],["^1C","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^42","~$goog.dom.safe","^3X","^3[","~$goog.math.Coordinate","~$goog.math.Size","^39","^36","~$goog.string.Unicode","~$goog.userAgent"]]],["^1C","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.debug.Error","^48"]]],["^1C","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","^36","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1C","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^2V","node_modules/object-assign/index.js"],[1589988033000,1589988033000,1484580833000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^1C","re_frame/db.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^K"]]],["^1C","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",[]]],["^1C","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^39"]]],["^1C","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^36","~$goog.string.StringBuffer"]]],["^2V","node_modules/react/cjs/react.production.min.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","^3P"]]],["^1C","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38"]]],["^1C","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^49","^3[","^3?","^3:"]]],["^1C","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^3:"]]],["^1C","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^A","~$reagent.impl.template","^3O","^33","^3H","^3K","^32","~$reagent.dom"]]],["^1C","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.math"]]],["^1C","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","^3W","^4G"]]],["^1C","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.debug.entryPointRegistry","~$goog.dom","^42","^49","^3W","^3X","^3<","^3D","^3E","^3?"]]],["^1C","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","^3X","^3Y","^3Z","^44","^3U","^3<","^3?","^3:"]]],["^1C","re_frame/utils.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^R"]]],["^1C","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^?","^33","^4E","^3H","^3K"]]],["^2V","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1589988033000,1589988033000,1549571078000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2["]]],["^1C","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O"]]],["^1C","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","~$goog.math.Long","~$goog.math.Integer","^36","^39","^37","~$goog.Uri","^4D"]]],["^1C","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","^3T","^3?","^3@"]]],["^1C","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N"]]],["^1C","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","^3Z","^39","^3?","^3@","^3:"]]],["^1C","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^3G"]]],["^1C","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^4="]]],["^2V","node_modules/scheduler/tracing.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2V","node_modules/react-dom/cjs/react-dom.development.js"],[1589988033000,1589988033000,499162500000,"^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^2[","^A","^3P","^3Q","^3S","~$module$node_modules$scheduler$tracing"]]],["^1C","clojure/set.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N"]]],["^1C","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^37","^38","^36"]]],["^1C","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^38","^3@"]]],["^1C","re_frame/trace.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^K","^R","^3W"]]],["^1C","re_frame/subs.cljc"],["3ff92169fe7588ad62dad2d6ea3bf0e5d3e2d224","^2W",["^ ","^2X",null,"^2Y",["^D",[]],"^2Z",["^O","^N","^S","^K","^R","^Q","^M","^L"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/trace.cljc",1590067192000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/re-frame/re-frame/0.12.0/re-frame-0.12.0.jar!/re_frame/interop.clj",1590067192000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1589988033000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1589532195000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1589382328000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1589988018000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1586970047000,"jar:file:/C:/Users/fireb/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1589988018000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^N","^O","^O","^P","^L","^Q","^Q","^R","^R","^S","^S"],"^T",["^D",["^U"]],"~:shadow/js-access-global",["^D",["Error"]],"^V",["^ ","^W","^K","^X","^R","^Y","^S","^Z","^K","^[","^K","^10","^K","^11","^M","^12","^Q","^13","^K","^14","^K","^15","^K","^16","^M","^17","^M"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1:",["~$quote",["^1:",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^E","^2F","^6","re_frame/subs.cljc","^:",13,"~:method-params",["^1:",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^5I",["^1:",["^5J",["^1:",[["~$x"]]]]],"^5K","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^5I",["^1:",["^5J",["^1:",[["~$query-v","~$dynv","~$r"]]]]],"^5K","cache the reaction r"],"^E","^2G","^6","re_frame/subs.cljc","^:",23,"^5L",["^1:",[["^5U","^5V","~$r"]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",42,"^9",42,"^5R",3,"^5S",true,"^5I",["^1:",["^5J",["^1:",[["^5U","^5V","~$r"]]]]],"^5K","cache the reaction r"],"~$deref-input-signals",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^5I",["^1:",["^5J",["^1:",[["~$signals","~$query-id"]]]]]],"^5X",true,"^E","^2L","^6","re_frame/subs.cljc","^:",27,"^5L",["^1:",[["^5Y","^5Z"]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",188,"^5P",["^D",["^5Q","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^5R",2,"^5S",true,"^5I",["^1:",["^5J",["^1:",[["^5Y","^5Z"]]]]]],"~$subscribe",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^5I",["^1:",["^5J",["^1:",[["~$query"],["^63","^5V"]]]]],"^5K","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^5O",false,"~:fixed-arity",2,"^5R",2,"^5L",[["^63"],["^63","^5V"]],"^5I",["^1:",[["^63"],["^63","^5V"]]],"^5N",["^1:",[null,null]]]],"^E","^2D","^6","re_frame/subs.cljc","^:",16,"^64",["^ ","^5O",false,"^65",2,"^5R",2,"^5L",[["^63"],["^63","^5V"]],"^5I",["^1:",[["^63"],["^63","^5V"]]],"^5N",["^1:",[null,null]]],"^5L",[["^63"],["^63","^5V"]],"^5M",null,"^65",2,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"~:methods",[["^ ","^65",1,"^5O",false,"~:tag",["^D",[null,"^60"]]],["^ ","^65",2,"^5O",false,"^67",["^D",[null,"^60"]]]],"^7",74,"^9",74,"^5R",2,"^5S",true,"^5I",["^1:",[["^63"],["^63","^5V"]]],"^5K","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^5I",["^1:",["^5J",["^1:",[["^5Z","~$&","~$args"]]]]],"^5K","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^64",["^ ","^5O",true,"^65",1,"^5R",1,"^5L",[["^1:",["^5Z","^69"]]],"^5I",["^1:",[["^5Z","~$&","^69"]]],"^5N",["^1:",[null]]]],"^E","^2I","^6","re_frame/subs.cljc","^:",14,"^64",["^ ","^5O",true,"^65",1,"^5R",1,"^5L",[["^1:",["^5Z","^69"]]],"^5I",["^1:",[["^5Z","~$&","^69"]]],"^5N",["^1:",[null]]],"^5L",[["^1:",["^5Z","^69"]]],"^5M",null,"^65",1,"^5N",["^1:",[null]],"^8",1,"^5O",true,"^66",[["^ ","^65",1,"^5O",true,"^67","^60"]],"^7",200,"^5P","^60","^9",200,"^5R",1,"^5S",true,"^5I",["^1:",[["^5Z","~$&","^69"]]],"^5K","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^E","^2N","^6","re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^67","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^5I",["^1:",["^5J",["^1:",[[]]]]],"^5K","Unregisters all existing subscription handlers"],"^E","^1W","^6","re_frame/subs.cljc","^:",26,"^5L",["^1:",[[]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",36,"^5P",["^D",["^60","~$clj-nil"]],"^9",36,"^5R",0,"^5S",true,"^5I",["^1:",["^5J",["^1:",[[]]]]],"^5K","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^5I",["^1:",["^5J",["^1:",[["^5U"],["^5U","~$dyn-v"]]]]],"^64",["^ ","^5O",false,"^65",2,"^5R",2,"^5L",[["^5U"],["^5U","^6?"]],"^5I",["^1:",[["^5U"],["^5U","^6?"]]],"^5N",["^1:",[null,null]]]],"^E","^2=","^6","re_frame/subs.cljc","^:",19,"^64",["^ ","^5O",false,"^65",2,"^5R",2,"^5L",[["^5U"],["^5U","^6?"]],"^5I",["^1:",[["^5U"],["^5U","^6?"]]],"^5N",["^1:",[null,null]]],"^5L",[["^5U"],["^5U","^6?"]],"^5M",null,"^65",2,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^66",[["^ ","^65",1,"^5O",false,"^67","^60"],["^ ","^65",2,"^5O",false,"^67",["^D",["^60","^6="]]]],"^7",65,"^9",65,"^5R",2,"^5S",true,"^5I",["^1:",[["^5U"],["^5U","^6?"]]]],"~$map-vals",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^5X",true,"^5I",["^1:",["^5J",["^1:",[["~$f","~$m"]]]]],"^5K","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^5X",true,"^E","^1R","^6","re_frame/subs.cljc","^:",16,"^5L",["^1:",[["~$f","~$m"]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",163,"^5P",["^D",["^5Q","^60"]],"^9",163,"^5R",2,"^5S",true,"^5I",["^1:",["^5J",["^1:",[["~$f","~$m"]]]]],"^5K","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^E","^2;","^6","re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^67","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^5I",["^1:",["^5J",["^1:",[[]]]]],"^5K","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^E","^29","^6","re_frame/subs.cljc","^:",32,"^5L",["^1:",[[]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",20,"^5P",["^D",["^60","^6="]],"^9",20,"^5R",0,"^5S",true,"^5I",["^1:",["^5J",["^1:",[[]]]]],"^5K","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^5H",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^5I",["^1:",["^5J",["^1:",[["~$f","^5Y"]]]]],"^5K","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^E","^23","^6","re_frame/subs.cljc","^:",18,"^5L",["^1:",[["~$f","^5Y"]]],"^5M",null,"^5N",["^1:",[null,null]],"^8",1,"^5O",false,"^7",171,"^5P",["^D",["^5Q","^5[","^60","^61"]],"^9",171,"^5R",2,"^5S",true,"^5I",["^1:",["^5J",["^1:",[["~$f","^5Y"]]]]],"^5K","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^18",["^ ","^L","^L","^P","^L","^N","^N"],"~:cljs.analyzer/constants",["^ ","^T",["^D",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^6K","^6M","^6O","^6Y","^6G","^6T","^6R","^6X","^6P","^6Q","^6W","^6L","^6S","^6U","^6F","^6I","^6V","^6J","^6H","^6N"]],"^1?",["^ ","^U",["^D",[]]],"^1@",["^ "],"^1A",["^O","^N","^S","^K","^R","^Q","^M","^L"]],"^H","^F","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^2U",[["^71","~:static-fns"],true,["^71","~:shadow-tweaks"],null,["^71","~:source-map-inline"],null,["^71","~:elide-asserts"],false,["^71","~:optimize-constants"],null,["^71","^1F"],null,["^71","~:external-config"],null,["^71","~:tooling-config"],null,["^71","~:emit-constants"],null,["^71","~:load-tests"],null,["^71","~:form-size-threshold"],null,["^71","~:infer-externs"],true,["^71","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^71","~:fn-invoke-direct"],null,["^71","~:source-map"],"/dev/null"]]]